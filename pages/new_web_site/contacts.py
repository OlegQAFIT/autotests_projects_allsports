import re
import requests
import allure
from selenium.webdriver.common.by import By
from selenium.common.exceptions import WebDriverException, TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from helpers.base import BasePage
from locators.elements_for_new_web_site.for_contacts_page import ContactsPageLocators


class ContactsPage(BasePage, ContactsPageLocators):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ö–æ–Ω—Ç–∞–∫—Ç—ã.
    –°—Ç–∏–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω –∫ —Ç–≤–æ–∏–º —Ç–µ—Å—Ç–∞–º –Ω–∞ MainPage: hard_click / fills_fild / assert_* / clc_*
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 2 —Ñ–æ—Ä–º—ã: "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é" (get-offer) –∏ "–°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º" (become-partner).
    –ï—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏: –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ / email, –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –∏ —á–µ–∫–±–æ–∫—Å–∞.
    –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã API-–ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """

    def __init__(self, driver):
        self.driver = driver

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.text_name = "–û–ª–µ–≥"
        self.text_phone_valid = "+375 29 758 72 34"
        self.text_phone_valid_api = "375297587234"  # –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –¥–ª—è API
        self.text_phone_invalid = "12345"
        self.text_email_valid = "qa@allsports.by"
        self.text_email_invalid = "oleg@@test"
        self.text_company = "–û–ê–û –ü—Ä–æ–≤–µ—Ä–∫–∞ Oleg"
        # –ù–∞ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–µ 'message' –º–æ–≥–ª–æ –±—ã—Ç—å, –Ω–∞ —Ç–µ–∫—É—â–µ–π - –∫–æ–º–ø–∞–Ω–∏—è.
        # –í–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π placeholder 'message/company' –∫–∞–∫ INPUT_MESSAGE_OR_COMPANY.

    # ==== –ù–∞–≤–∏–≥–∞—Ü–∏—è / Cookies ====

    @allure.step("–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    def open(self):
        self.driver.get("https://www.allsports.by/ru-by/contacts")

    @allure.step("–ü—Ä–∏–Ω—è—Ç—å cookies (–µ—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–æ)")
    def accept_cookie_consent(self):
        try:
            accept_button = WebDriverWait(self.driver, 2).until(
                EC.element_to_be_clickable((By.CLASS_NAME, 'cookie-primary-modal__confirm'))
            )
            accept_button.click()
        except (WebDriverException, TimeoutException):
            pass

    # ==== –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —Ñ–æ—Ä–º—ã ====

    @allure.step("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é'")
    def switch_to_get_offer(self):
        # id="get-offer"
        try:
            tab = WebDriverWait(self.driver, 5).until(
                EC.element_to_be_clickable((By.ID, "get-offer"))
            )
            tab.click()
        except Exception:
            # fallback –ø–æ –ª–æ–∫–∞—Ç–æ—Ä—É
            self.hard_click("//li[@id='get-offer' or contains(., '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é')]")

    @allure.step("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º'")
    def switch_to_become_partner(self):
        # id="become-partner"
        try:
            tab = WebDriverWait(self.driver, 5).until(
                EC.element_to_be_clickable((By.ID, "become-partner"))
            )
            tab.click()
        except Exception:
            self.hard_click("//li[@id='become-partner' or contains(., '–°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º') or contains(., '–°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º')]")




    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏")
    def check_contacts_text_exact(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω—ã, e-mail –∏ –∞–¥—Ä–µ—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —è–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–∞–∫ –Ω–∞ –º–∞–∫–µ—Ç–µ.
        """

        # --- –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–∑ —Ç–≤–æ–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞) ---
        expected_contacts = {
            "clients_phone": "+375 44 771 09 47",
            "clients_email": "sales@allsports.by",
            "partners_phone": "+375 44 525 38 92",
            "partners_email": "suppliers@allsports.by",
            "support_phone": "+375 44 770 94 26",
            "support_email": "support@allsports.by",
            "address": "220030 –≥. –ú–∏–Ω—Å–∫, —É–ª. –ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, 36-2, –æ—Ñ–∏—Å—ã 2-20, 1-21",
        }

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ ---
        page_source = self.driver.page_source

        for key, value in expected_contacts.items():
            assert value in page_source, f"‚ùå –¢–µ–∫—Å—Ç '{value}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–∫–ª—é—á: {key})"

        print("‚úÖ –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")


    # ==== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ ====

    def _el(self, xpath, timeout=5):
        return WebDriverWait(self.driver, timeout).until(
            EC.presence_of_element_located((By.XPATH, xpath))
        )

    @allure.step("–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã (–ò–º—è / –¢–µ–ª–µ—Ñ–æ–Ω / E-mail / –ö–æ–º–ø–∞–Ω–∏—è)")
    def fill_form_standard(self, name, phone, email, company):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ—é –ø—Ä–∏–≤—ã—á–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É fills_fild
        if self.is_element_exist(self.INPUT_NAME):
            self.fills_fild(self.INPUT_NAME, name)
        if self.is_element_exist(self.INPUT_PHONE):
            self.fills_fild(self.INPUT_PHONE, phone)
        if self.is_element_exist(self.INPUT_EMAIL):
            self.fills_fild(self.INPUT_EMAIL, email)
            # üí° –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ email –∫–ª–∏–∫–∞–µ–º –Ω–∞ –¥—Ä—É–≥–æ–µ –ø–æ–ª–µ, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é
            try:
                if self.is_element_exist(self.INPUT_MESSAGE):
                    self.driver.find_element(By.XPATH, self.INPUT_MESSAGE).click()
                else:
                    # fallback: –µ—Å–ª–∏ –ø–æ–ª–µ "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞" (company)
                    self.driver.find_element(
                        By.XPATH, "//input[contains(@placeholder, '–ö–æ–º–ø–∞–Ω–∏—è') or contains(@placeholder, '–æ–±—ä–µ–∫—Ç')]"
                    ).click()
            except Exception:
                self.driver.execute_script("document.activeElement.blur();")

        # –ù–∞ —Ç–µ–∫—É—â–µ–º —Å–∞–π—Ç–µ –≤–º–µ—Å—Ç–æ 'message' ‚Äî –ø–æ–ª–µ '–ö–æ–º–ø–∞–Ω–∏—è'
        # –ü–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: textarea message –ò–õ–ò input company
        if self.is_element_exist(self.INPUT_MESSAGE):
            self.fills_fild(self.INPUT_MESSAGE, company)
        elif self.is_element_exist("//input[contains(@placeholder, '–ö–æ–º–ø–∞–Ω–∏—è') or contains(@placeholder, '–∫–æ–º–ø–∞–Ω–∏—è')]"):
            self.fills_fild("//input[contains(@placeholder, '–ö–æ–º–ø–∞–Ω–∏—è') or contains(@placeholder, '–∫–æ–º–ø–∞–Ω–∏—è')]",
                            company)

    @allure.step("–ù–∞–∂–∞—Ç—å —á–µ–∫–±–æ–∫—Å —Å–æ–≥–ª–∞—Å–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
    def clc_checkbox(self, should_check=True):
        # –í—ë—Ä—Å—Ç–∫–∞: .agreement .checkbox > input[type='checkbox']
        # –õ–æ–∫–∞—Ç–æ—Ä –≤ –ª–æ–∫–∞—Ç–æ—Ä–∞—Ö: CHECKBOX_AGREE (input)
        if self.is_element_exist(self.CHECKBOX_AGREE):
            cb = self._el(self.CHECKBOX_AGREE, timeout=5)
            is_checked = cb.is_selected()
            if should_check and not is_checked:
                self.hard_click(self.CHECKBOX_AGREE)
            elif not should_check and is_checked:
                self.hard_click(self.CHECKBOX_AGREE)

    @allure.step("–ö–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É")
    def clc_send(self):
        # –ù–∞ —Ç–≤–æ—ë–º —Å—Ç–∏–ª–µ ‚Äî hard_click
        # –ò–Ω–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ disabled ‚Äî —Ç–æ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ª–æ–∫–∞—Ç–æ—Ä –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ not(@disabled)
        if self.is_element_exist(self.BUTTON_SEND_ENABLED):
            self.hard_click(self.BUTTON_SEND_ENABLED)
        else:
            # fallback ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ –æ–±—â–µ–º—É –ª–æ–∫–∞—Ç–æ—Ä—É –∫–Ω–æ–ø–∫–∏
            self.hard_click(self.BUTTON_SEND_ANY)

    # ==== –ö–Ω–æ–ø–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞/–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ ====

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–∞")
    def check_button_state_active(self):
        # –ö–Ω–æ–ø–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π, –µ—Å–ª–∏ –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ disabled
        btn = self._el(self.BUTTON_SEND_ANY, timeout=5)
        disabled = btn.get_attribute("disabled")
        assert not disabled, "–û–∂–∏–¥–∞–ª–æ—Å—å, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ —É –Ω–µ—ë –µ—Å—Ç—å disabled"

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ù–ï –∞–∫—Ç–∏–≤–Ω–∞")
    def check_button_state_disabled(self):
        # –õ–∏–±–æ –µ—Å—Ç—å disabled, –ª–∏–±–æ –Ω–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ enabled
        btn = self._el(self.BUTTON_SEND_ANY, timeout=5)
        disabled = btn.get_attribute("disabled")
        assert disabled is not None, "–û–∂–∏–¥–∞–ª–æ—Å—å, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ (disabled), –Ω–æ disabled –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    # ==== –ö–∞—Ä—Ç–∞ (—Å–º—è–≥—á—ë–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –±–µ–∑ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏) ====

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∫–∞—Ä—Ç–∞ (Google –∏–ª–∏ Mapbox) –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
    def check_google_map(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (Mapbox –∏–ª–∏ Google).
        –ù–∞ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ —Å–∞–π—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Mapbox: <div id="map" class="mapboxgl-map">.
        """
        try:
            map_el = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.XPATH, self.MAP_IFRAME))
            )
            assert map_el.is_displayed(), "–≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"
            classes = map_el.get_attribute("class") or ""
            assert (
                    "mapboxgl" in classes or "contacts-map" in classes
            ), f"–≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (class={classes})"
        except Exception as e:
            assert False, f"–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {e}"

    # ==== –£—Å–ø–µ—Ö / –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ====

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–∞ –º–æ–¥–∞–ª–∫–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ")
    def assert_success_modal(self):
        # –ò–Ω–æ–≥–¥–∞ –º–æ–¥–∞–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ—Å—Ç–æ–º ‚Äî –∂–¥—ë–º –ø–æ —Ç–µ–∫—Å—Ç–∞–º
        self.assert_element_present(self.MODAL_SUCCESS)

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã (–æ–±—â–∞—è)")
    def assert_any_validation_error(self):
        self.assert_element_present(self.ERROR_MESSAGE)

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    def assert_phone_error(self):
        # –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ—à–∏–±–∫—É —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        # –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: <div class="input-error">...</div>
        # –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π: "–§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞: +375 00 000 00 00", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä"
        xpath = (
            "//label[contains(., '–¢–µ–ª–µ—Ñ–æ–Ω') or .//input[@name='phone']]"
            "//div[contains(@class,'input-error')][string-length(normalize-space())>0]"
        )
        assert self.is_element_exist(xpath), "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email")
    def assert_email_error(self):
        xpath = (
            "//label[contains(., 'Email') or .//input[@name='email']]"
            "//div[contains(@class,'input-error')][string-length(normalize-space())>0]"
        )
        assert self.is_element_exist(xpath), "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"

    # ==== –û—Ç–ø—Ä–∞–≤–∫–∞: –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (–¥–≤–µ —Ñ–æ—Ä–º—ã) ====

    @allure.step("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é' –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    def submit_form_valid_get_offer(self):
        self.switch_to_get_offer()
        self.fill_form_standard(self.text_name, self.text_phone_valid, self.text_email_valid, self.text_company)
        self.clc_checkbox(True)
        self.check_button_state_active()
        self.clc_send()

    @allure.step("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É '–°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º' –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    def submit_form_valid_become_partner(self):
        self.switch_to_become_partner()
        self.fill_form_standard(self.text_name, self.text_phone_valid, self.text_email_valid, self.text_company)
        self.clc_checkbox(True)
        self.check_button_state_active()
        self.clc_send()

    # ==== –û—Ç–ø—Ä–∞–≤–∫–∞: –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (–æ–±–µ —Ñ–æ—Ä–º—ã) ====

    @allure.step("–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É c –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)")
    def submit_form_invalid(self, for_partner=False, email=False, phone=False, empty=False, no_agree=False):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ–±–µ–∏—Ö —Ñ–æ—Ä–º (get-offer / become-partner).
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π email / —Ç–µ–ª–µ—Ñ–æ–Ω, –ø—É—Å—Ç—ã–µ –ø–æ–ª—è, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —á–µ–∫–±–æ–∫—Å–∞.
        """

        # –í—ã–±–æ—Ä –≤–∫–ª–∞–¥–∫–∏
        if for_partner:
            self.switch_to_become_partner()
        else:
            self.switch_to_get_offer()

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        name = "" if empty else self.text_name
        ph = "" if empty else (self.text_phone_invalid if phone else self.text_phone_valid)
        em = "" if empty else (self.text_email_invalid if email else self.text_email_valid)
        company = "" if empty else self.text_company

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
        self.fill_form_standard(name, ph, em, company)

        # üí° –ï—Å–ª–∏ email –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ‚Äî –∫–ª–∏–∫–∞–µ–º –≤ –¥—Ä—É–≥–æ–µ –ø–æ–ª–µ, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è blur()
        if email:
            try:
                if self.is_element_exist(self.INPUT_PHONE):
                    self.driver.find_element(By.XPATH, self.INPUT_PHONE).click()
                else:
                    self.driver.execute_script("document.activeElement.blur();")
            except Exception:
                self.driver.execute_script("document.activeElement.blur();")

        # üí° –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ‚Äî —Ç–æ–∂–µ —É–≤–æ–¥–∏–º —Ñ–æ–∫—É—Å, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if phone:
            try:
                if self.is_element_exist(self.INPUT_EMAIL):
                    self.driver.find_element(By.XPATH, self.INPUT_EMAIL).click()
                else:
                    self.driver.execute_script("document.activeElement.blur();")
            except Exception:
                self.driver.execute_script("document.activeElement.blur();")

        # –†–∞–±–æ—Ç–∞ —Å —á–µ–∫–±–æ–∫—Å–æ–º
        if no_agree:
            self.clc_checkbox(False)
        else:
            self.clc_checkbox(True)

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∏ –æ—à–∏–±–æ–∫ ---
        if empty or no_agree:
            # –µ—Å–ª–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ –∏–ª–∏ —á–µ–∫–±–æ–∫—Å –Ω–µ –Ω–∞–∂–∞—Ç ‚Äî –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
            self.check_button_state_disabled()
        else:
            # –µ—Å–ª–∏ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã ‚Äî –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏
            if email or phone:
                # –∫–Ω–æ–ø–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π ‚Äî –ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å
                if self.is_button_enabled():
                    self.clc_send()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
                if email:
                    self.assert_email_error()
                if phone:
                    self.assert_phone_error()
            else:
                # fallback ‚Äî –æ–±—â–∞—è –æ—à–∏–±–∫–∞
                self.assert_any_validation_error()

    # ==== –°–ª—É–∂–µ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ ====

    def is_button_enabled(self) -> bool:
        try:
            btn = self._el(self.BUTTON_SEND_ANY, timeout=5)
            return btn.get_attribute("disabled") is None
        except Exception:
            return False

    # ==== –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π ====

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å: –∫–Ω–æ–ø–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –í–°–ï –ø–æ–ª—è –∏ –Ω–µ –Ω–∞–∂–∞—Ç —á–µ–∫–±–æ–∫—Å")
    def assert_button_inactive_until_all_required(self):
        self.switch_to_get_offer()

        # 1) –≤—Å—ë –ø—É—Å—Ç–æ
        self.clear_if_exists(self.INPUT_NAME)
        self.clear_if_exists(self.INPUT_PHONE)
        self.clear_if_exists(self.INPUT_EMAIL)
        self.clear_if_exists(self.INPUT_MESSAGE)
        self.clc_checkbox(False)
        self.check_button_state_disabled()

        # 2) –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–ª—è, –Ω–æ –±–µ–∑ —á–µ–∫–±–æ–∫—Å–∞
        self.fill_form_standard(self.text_name, self.text_phone_valid, self.text_email_valid, self.text_company)
        self.clc_checkbox(False)
        self.check_button_state_disabled()

        # 3) –≤—Å—ë –∑–∞–ø–æ–ª–Ω–µ–Ω–æ + —á–µ–∫–±–æ–∫—Å ‚Üí —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π
        self.clc_checkbox(True)
        self.check_button_state_active()

    # ==== API-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∫–∞–∫ –Ω–∞ MainPage) ====

    def _api_post(self, url: str, payload: dict, expected_status_code=204):
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Cookie': 'allsports_agr=%7B%22technical%22%3Atrue%2C%22analytical%22%3Afalse%7D; country=ru-by',
            'Referer': 'https://www.allsports.by/ru-by',
            'Origin': 'https://www.allsports.by',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36'
        }
        response = requests.post(url, headers=headers, json=payload)
        print(f"API [{url}] -> {response.status_code}")
        assert response.status_code == expected_status_code, \
            f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å {expected_status_code}, –ø–æ–ª—É—á–µ–Ω {response.status_code}"

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é'")
    def assert_form_get_offer(self, expected_status_code=204):
        url = 'https://www.allsports.by/api/www/2.0.0/contact/get_offer'
        payload = {
            'companyName': self.text_company,
            'name': self.text_name,
            'email': self.text_email_valid,
            'phone': self.text_phone_valid_api,
            'country': 'by',
            'location': 'default',
            'processPersonalData': True
        }
        self._api_post(url, payload, expected_status_code)

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ '–°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º'")
    def assert_form_become_partner(self, expected_status_code=204):
        url = 'https://www.allsports.by/api/www/2.0.0/contact/become_partner'
        payload = {
            'companyName': self.text_company,
            'name': self.text_name,
            'email': self.text_email_valid,
            'phone': self.text_phone_valid_api,
            'country': 'by',
            'location': 'default',
            'processPersonalData': True
        }
        self._api_post(url, payload, expected_status_code)

    # ==== –ú–µ—Ç–∞ / –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å / –ö–æ–Ω—Å–æ–ª—å / –°—Å—ã–ª–∫–∏ / –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å / UI ====

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    def check_page_header(self):
        self.assert_element_present(self.PAGE_TITLE)

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–∞ —Å –∞–¥—Ä–µ—Å–æ–º")
    def check_address_block(self):
        self.assert_element_present(self.ADDRESS_BLOCK)

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ü. —Å—Å—ã–ª–æ–∫")
    def check_social_links_exist(self):
        assert self.count_elements(self.SOCIAL_LINKS) >= 1, "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ <title> –∏ <meta name='description'>")
    def check_meta_tags(self):
        title = self.driver.title
        assert title and len(title) > 0, "–¢–µ–≥ <title> –ø—É—Å—Ç–æ–π"
        metas = self.driver.find_elements(By.XPATH, "//meta[@name='description']")
        assert metas, "Meta description –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        desc = metas[0].get_attribute("content") or ""
        assert len(desc) > 0, "Meta description –ø—É—Å—Ç–æ–π"

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (<= 3000 –º—Å)")
    def check_performance(self, max_load_ms=3000):
        timing = self.driver.execute_script("return window.performance.timing")
        load_time = (timing.get('loadEventEnd', 0) or 0) - (timing.get('navigationStart', 0) or 0)
        assert load_time > 0, "performance.timing –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        assert load_time <= max_load_ms, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥—Ä—É–∑–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ: {load_time} –º—Å"

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞")
    def check_console_errors(self):
        errors = self.get_js_console_errors()
        assert len(errors) == 0, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏: {errors}"



    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫ (http/https)")
    def check_external_links_format(self):
        links = self.driver.find_elements(By.XPATH, "//a[@href]")
        bad = []
        for l in links:
            href = l.get_attribute('href') or ''
            if href.startswith(('mailto:', 'tel:', '/')):
                continue
            if not href.startswith('http'):
                bad.append(href)
        assert not bad, f"–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏: {bad}"

    # ==== –°–ª—É–∂–µ–±–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ====

    def clear_if_exists(self, locator):
        if self.is_element_exist(locator):
            try:
                el = self._el(locator, timeout=3)
                el.clear()
            except Exception:
                pass

    # ==== –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–≤–æ–∏—Ö —Å—Ç–∞—Ä—ã—Ö –∏–º—ë–Ω —à–∞–≥–æ–≤ ====

    @allure.step("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è, –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
    def submit_form_valid(self):
        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é"
        self.submit_form_valid_get_offer()

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É (–º–æ–¥–∞–ª–∫–∞/—Å—Ç–∞—Ç—É—Å)")
    def check_success_modal(self):
        # –í–∏–∑—É–∞–ª—å–Ω–æ:
        try:
            self.assert_success_modal()
        except AssertionError:
            # –ï—Å–ª–∏ –≤–∏–∑—É–∞–ª–∫–∏ –Ω–µ—Ç/–∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º API (–¥–ª—è get_offer –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            self.assert_form_get_offer()

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å' –∞–∫—Ç–∏–≤–Ω–∞")
    def check_send_button_enabled(self):
        self.check_button_state_active()

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã (–ª—é–±–∞—è)")
    def check_validation_error(self):
        self.assert_any_validation_error()

    # ==== –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ====

    @allure.step("–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
    def get_phone_elements(self):
        return self.find_elements(self.PHONE_LINKS, timeout=10)

    @allure.step("–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ email-—Å—Å—ã–ª–∫–∏")
    def get_email_elements(self):
        return self.find_elements(self.EMAIL_LINKS, timeout=10)

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç tel: —É –≤—Å–µ—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")
    def verify_tel_links_format(self):
        phones = self.driver.find_elements(By.XPATH, self.PHONE_LINKS)
        assert phones, "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        for a in phones:
            href = a.get_attribute("href") or ""
            assert href.startswith("tel:"), f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π href —É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {href}"

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç mailto: —É –≤—Å–µ—Ö email")
    def verify_mailto_links_format(self):
        emails = self.driver.find_elements(By.XPATH, self.EMAIL_LINKS)
        assert emails, "Email-—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        for a in emails:
            href = a.get_attribute("href") or ""
            assert href.startswith("mailto:"), f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π href —É email: {href}"

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–∞ —Å –∞–¥—Ä–µ—Å–æ–º/–∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏")
    def check_address_block(self):
        self.assert_element_present(self.ADDRESS_BLOCK)

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ü. —Å—Å—ã–ª–æ–∫")
    def check_social_links_exist(self):
        assert self.count_elements(self.SOCIAL_LINKS) >= 1, "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

    # ==== Footer ====

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ—É—Ç–µ—Ä–∞ (—Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∫–æ–ø–∏—Ä–∞–π—Ç, —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞)")
    def check_footer_all(self):
        self.scroll_down()
        self.assert_element_present(self.FOOTER_COMPANY_INFO)
        self.assert_element_present(self.FOOTER_COPYRIGHT)
        self.assert_element_present(self.FOOTER_RULES_LINK)

    @allure.step("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ '–ü—Ä–∞–≤–∏–ª–∞ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥'")
    def check_footer_rules_link_present(self):
        self.assert_element_present(self.FOOTER_RULES_LINK)
